1. Как получить ссылку на текущий поток ?
-Используем статический метод класса Thread - currentThread

2. Зачем нужно ключевое слово synchronized ? На что его можно вещать(поле, метод, класс, конструктор..) ?
-synchronized – используется для управления доступом к ресурсам, чтобы предотвратить
проблемы, связвнные с многопоточностью, такие как состояние гонки. Оно позволяет
синхронизировать доступ к методам или блокам кода, обеспечивая, что только один поток
может выполнять  синхронизированный код в данный момент времени. Для синхронизации
всегда неоходим объект, так как в Java у объектов существует монитор и этот монитор в один
момент времени может быть только у одного потока. Этот монитор неявным образом
используется в synchronized.
Можно вешать на методы, статические методы, блоки кода

3. Захват какого монитора происходит при входе в synchronized метод/статик метод/блок ?
- экземплярный метод: монитор объекта this, на котором вызывается метод
Статический метод: монитор объекта класса Class.class
Синхронизированный блок: монитор объекта lock, который указан в скобках

4. Зачем нужно ключевое слово volatile ? На что его можно вещать(поле, метод, класс, конструктор..) ?
Ключевое слово volatile гарантирует, что изменения переменной видны всем потокам сразу и не кэшируются в локальной
памяти потоков. Этьо обеспечивает согласованность данных между потоками. Можно вешать на поля.

5. Что делает метод Object#wait, Object#notify, Object#notifyAll
-wait: поток освобождает монитор объекта и переходит в состояние ожидания, пока другой поток не вызовет notify или notifyAll на том же объекте
notify: будит один поток, ожидающий на мониторе данного объекта
notifyAll: будит все потоки, ожидающие на мониторе данного объекта

6. Что за исключение IllegalMonitorStateException ?
-Выбрасывается, если поток вызывает методы notify, wait, notifyAll, но не содержит монитор объекта

7. Что делает метод Thread#join ?
-Метод join() заставляет текущий поток ожидать завершения другого потока

8. Что делает метод Thread#interrupt ?
-Метод interrupt устанавливает флаг прерывания у потока. Это сигнал потоку, что его следует остановить.
Если поток ожидает, спит или блокируется, он выбросит исключение InterruptException.
Если поток просто выполняет код, флаг прерывания можно проверить через Thread.interrupt() или isInterrupt()